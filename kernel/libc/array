/*
 * File originally sourced from <https://github.com/osdev0/freestanding-cxx-hdrs>
 *
 * Copyright 2017-2020 cxxshim Contributors
 * Copyright (C) 2023 mintsuki and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef _CXXSHIM_ARRAY
#define _CXXSHIM_ARRAY

#include <cstddef>

namespace std {

template<typename Element, std::size_t Count>
struct __array_container {
	using type = Element[Count];
};

template<typename Element>
struct __array_container<Element, 0> {
	struct type {
		Element &operator[](std::size_t) const noexcept {
			__builtin_trap();
		}

		constexpr explicit operator Element*() const noexcept {
			return nullptr;
		}
	};
};

template<typename Element, std::size_t Count>
struct array {
	typedef Element *pointer;
	typedef const Element *const_pointer;
	typedef Element &reference;
	typedef const Element &const_reference;
	typedef Element *iterator;
	typedef const Element *const_iterator;

	typename __array_container<Element, Count>::type elements_;

	[[nodiscard]] constexpr std::size_t size() const noexcept {
		return Count;
	}

	[[nodiscard]] constexpr std::size_t max_size() const noexcept {
		return Count;
	}

	[[nodiscard]] constexpr bool empty() const noexcept {
		return size() == 0;
	}

	[[nodiscard]] reference operator[](std::size_t n) noexcept {
		return elements_[n];
	}

	[[nodiscard]] const_reference operator[](std::size_t n) const noexcept {
		return elements_[n];
	}

	[[nodiscard]] pointer data() noexcept {
		return static_cast<pointer>(elements_);
	}

	[[nodiscard]] const_pointer data() const noexcept {
		return static_cast<const_pointer>(elements_);
	}

	[[nodiscard]] iterator begin() noexcept {
		return iterator(data());
	}

	[[nodiscard]] const_iterator begin() const noexcept {
		return const_iterator(data());
	}

	[[nodiscard]] iterator end() noexcept {
		return iterator(data() + Count);
	}

	[[nodiscard]] const_iterator end() const noexcept {
		return const_iterator(data() + Count);
	}
};

} // namespace std

#endif // _CXXSHIM_ARRAY
