/*
 * File originally sourced from <https://github.com/osdev0/freestanding-cxx-hdrs>
 *
 * Copyright 2017-2020 cxxshim Contributors
 * Copyright (C) 2023 mintsuki and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef _CXXSHIM_UTILITY
#define _CXXSHIM_UTILITY

#include <stddef.h>
#include <type_traits>

#ifdef CXXSHIM_INTEGRATE_GCC
#include <bits/move.h>
#endif

namespace std {

#ifndef CXXSHIM_INTEGRATE_GCC
template<typename T>
constexpr remove_reference_t<T> &&move(T &&x) noexcept {
	return static_cast<remove_reference_t<T> &&>(x);
}

template<typename T>
constexpr T &&forward(remove_reference_t<T> &x) noexcept {
	return static_cast<T &&>(x);
}

template<typename T>
void swap(T &x, T &y) {
	T temp{move(x)};
	x = move(y);
	y = move(temp);
}
#endif // !defined(CXXSHIM_INTEGRATE_GCC)

template<class T, class U = T>
T exchange(T &ref, U &&v) {
	T temp = std::move(ref);
	ref = std::forward<U>(v);
	return temp;
}

template<typename I, I... Seq>
class integer_sequence { };

template<size_t... Seq>
using index_sequence = integer_sequence<size_t, Seq...>;

namespace detail {
	template<typename I, I X, I N, I... Seq>
	struct _make_seq_helper {
		using type = typename _make_seq_helper<I, X + 1, N, Seq..., X>::type;
	};

	template<typename I, I N, I... Seq>
	struct _make_seq_helper<I, N, N, Seq...> {
		using type = integer_sequence<I, Seq...>;
	};
} // namespace detail

template<typename I, I N>
using make_integer_sequence = typename detail::_make_seq_helper<I, 0, N>::type;

template<size_t N>
using make_index_sequence = make_integer_sequence<size_t, N>;

template<typename... T>
using index_sequence_for = make_index_sequence<sizeof...(T)>;

template<typename T1, typename T2>
struct pair {
	T1 first;
	T2 second;
};

template<typename T1, typename T2, typename U1, typename U2>
constexpr bool operator==(const pair<T1, T2> &x, const pair<U1, U2> &y) {
	return x.first == y.first && x.second == y.second;
}

} // namespace std

#endif // _CXXSHIM_UTILITY
